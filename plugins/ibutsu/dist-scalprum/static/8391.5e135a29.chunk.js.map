{"version":3,"file":"static/8391.5e135a29.chunk.js","mappings":"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","sources":["webpack://internal.backstage-plugin-ibutsu/./src/components/IbutsuComponent/IbutsuComponent.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport {\n    Button,\n    CircularProgress,\n    Grid,\n    Link,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Pill } from 'evergreen-ui'\nimport Stack from '@mui/material/Stack';\nimport { useApi, configApiRef } from '@backstage/core-plugin-api';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { InfoCard } from '@backstage/core-components';\n\nexport function IbutsuComponent() {\n    const [results, setResults] = React.useState<any[]>([]);\n    const [resultsPage, setResultsPage] = React.useState<any[]>([]);\n    const [page, setPage] = React.useState<number>(0);\n    const [infoData, setInfoData] = React.useState<any[]>([]);\n    const [showHealthDataError, setShowHealthDataError] = React.useState(false)\n    const [showRunsDataError, setShowRunsDataError] = React.useState(false)\n\n    // state variable for spinner logic\n    const [loading, setLoading] = React.useState(true)\n    const pageSize: number = 5\n\n    const config = useApi(configApiRef);\n    const { entity } = useEntity();\n    const title = 'Test Results';\n\n    console.log(entity?.metadata?.annotations?.[\"ibutsu/component-name\"]);\n\n    // Style configurations for buttons\n    const useStylesButton = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                '& > *': {\n                    margin: theme.spacing(1),\n                },\n            },\n        }),\n    );\n\n    // Style configurations for circluar progress icon\n    const useStylesCircularProgress = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                '& > * + *': {\n                    marginLeft: theme.spacing(2),\n                },\n            },\n        }),\n    );\n\n    const classesButton = useStylesButton();\n    const classesCircularProgress = useStylesCircularProgress();\n\n    const maxPages = () => {\n        return results.length / pageSize;\n    }\n\n    const pageIncrement = () => {\n        if (page >= maxPages()) {\n            return\n        }\n\n        setPage(page + 1)\n    }\n\n    const pageDecrement = () => {\n        if (page === 0) {\n            return\n        }\n\n        setPage(page - 1)\n    }\n\n    const canIncrement = () => {\n        return page < maxPages()\n    }\n\n    const canDecrement = () => {\n        return page > 0\n    }\n\n    const formatISOdateOutput = (isoDateFormat) => {\n        const date = isoDateFormat.substring(0,10)\n        const time = isoDateFormat.substring(11,19)\n    \n        return `${date}, ${time}`\n    }\n\n    const appName = () => {\n        // Some component names don't match the app's name\n        if (entity?.metadata?.annotations?.[\"ibutsu/component-name\"]) {\n            return entity?.metadata?.annotations?.[\"ibutsu/component-name\"]\n        }\n\n        return entity?.metadata?.name.substring(0, entity?.metadata?.name.indexOf(\"-\"));\n    }\n\n    const apiBaseUrl = () => {\n        const baseUrl: string = config.getString('backend.baseUrl');\n        return `${baseUrl}/api/proxy/ibutsu/api`;\n    }\n\n    const getHealthData = async () => {\n        const healthUrl = `${apiBaseUrl()}/health/info`;\n\n        fetch(healthUrl, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(response => {\n            if (!response.ok) {\n                throw new Error(`Network response was not ok ${response.statusText}`);\n            }\n            return response.json();\n        }).then(data => {\n            setInfoData(data.frontend);\n            console.log(infoData);\n        }).catch(error => {\n            setShowHealthDataError(true);\n            console.error('error fetching health data from Ibutsu API:', error);\n        });\n    }\n\n    const getRunsData = async () => {\n        const runsOpts = {\n            'filter': `component=${appName()}`,\n            'page': 1,\n            'pageSize': 50,\n        };\n\n        const runsQueryString = new URLSearchParams(runsOpts).toString();\n        const runsUrl = `${apiBaseUrl()}/run?${runsQueryString}`;\n\n        fetch(runsUrl, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(response => {\n            if (!response.ok) {\n                throw new Error(`Network response was not ok ${response.statusText}`);\n            }\n\n            return response.json();\n        }).then(data => {\n            const appRuns = data.runs;\n\n            if (appRuns.length === 0) {\n                throw new Error(\n                    `No test runs data was returned from the Ibutsu API`);\n            }\n\n            setResults(appRuns.filter(d => d.component === appName()))\n            console.log(data);\n        }).catch(error => {\n            setShowRunsDataError(true);\n            console.error('Error fetching test run data from Ibutsu API:', error);\n        }).finally(() => {\n            setLoading(false)\n        });\n    }\n\n    const RowHead = () => {\n        return (\n            <TableHead>\n            <TableRow>\n                <TableCell align=\"center\"><Typography variant=\"button\">Created</Typography></TableCell>\n                <TableCell align=\"center\"><Typography variant=\"button\">Run ID</Typography></TableCell>\n                <TableCell align=\"center\"><Typography variant=\"button\">Duration</Typography></TableCell>\n                <TableCell align=\"center\"><Typography variant=\"button\">Environment</Typography></TableCell>\n                <TableCell align=\"center\"><Typography variant=\"button\">Results</Typography></TableCell>\n            </TableRow>\n        </TableHead>\n        )\n    }\n\n    const summaryItems = [\n        { key: 'collected', title: 'Collected', color: '#0066CC' },\n        { key: 'tests', title: 'Total', color: '#0066CC' },\n        { key: 'passes', title: 'Passed', color: '#63993d' },\n        { key: 'errors', title: 'Errors', color: '#EE0000' },\n        { key: 'failures', title: 'Failures', color: '#EE0000' },\n        { key: 'not_run', title: 'Not Run', color: '#0066CC' },\n        { key: 'skips', title: 'Skipped', color: '#0066CC' },\n        { key: 'xfailures', title: 'xFailures', color: '#EE0000' },\n        { key: 'xpasses', title: 'xPasses', color: '#63993d' },\n    ];\n\n    const SummaryPills = ({ result }) => (\n        <Stack direction=\"row\" spacing={1}>\n            {summaryItems.map(item => (\n                result.summary[item.key] > 0 && (\n                    <Tooltip title={item.title}>\n                        <Pill style={{backgroundColor: item.color, color: \"#FFFFFF\"}}>{result.summary[item.key]}</Pill>\n                    </Tooltip>\n                )\n            ))}\n        </Stack>\n    );\n\n    const RowBody = ({ result }) => {\n        return (\n            <TableRow>\n                <TableCell align=\"center\">{formatISOdateOutput(result.created)}</TableCell>\n                <TableCell align=\"center\">\n                    <Link href={`${infoData}/runs/${result.id}`}>\n                        {result.id}\n                    </Link>\n                </TableCell>\n                <TableCell align=\"center\">{result.duration.toFixed(1)}s</TableCell>\n                <TableCell align=\"center\">{result.env}</TableCell>\n                <TableCell align=\"center\">\n                    <SummaryPills result={result}/>\n                </TableCell>\n            </TableRow>\n        )\n    }\n\n    const ShowTable = () => {\n        return (\n            <Table aria-label=\"simple table\">\n                <RowHead />\n                <TableBody>\n                    {resultsPage.map((item) => (\n                        <RowBody result={item} />\n                    ))}\n                </TableBody>\n            </Table>\n        )\n    }\n\n    const PaginationButtons = () => {\n        return (\n            <div className={classesButton.root}>\n                <Button variant=\"contained\" color=\"primary\" onClick={pageDecrement} disabled={!canDecrement()}>Previous</Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={pageIncrement} disabled={!canIncrement()}>Next</Button>\n            </div>\n        )\n    }\n\n    // fetch data from Ibutsu API on load only\n    useEffect(() => {\n        getHealthData()\n        getRunsData()\n    }, [])\n\n    // Used for pagination\n    useEffect(() => {\n        const pageOffset = page * pageSize;\n        setResultsPage(results.slice(pageOffset, pageOffset + pageSize))\n    }, [page, results])\n\n    if (showHealthDataError) {\n        return (\n            <InfoCard>\n                <Typography>Error retrieving Ibutsu health data from Ibutsu API</Typography>\n            </InfoCard>\n        )\n    }\n\n    if (showRunsDataError) {\n        return (\n            <InfoCard>\n                <Typography>Error retrieving Ibutsu test runs data from Ibutsu API</Typography>\n            </InfoCard>\n        )\n    }\n\n    if (loading) {\n        return (\n            <div className={classesCircularProgress.root}>\n                <CircularProgress />\n            </div>\n        )\n    }\n\n    return (\n        <InfoCard title={title} noPadding>\n            <Grid container spacing={3} direction=\"column\">\n                <Grid item>\n                    <TableContainer component={Paper}>\n                        <ShowTable />\n                    </TableContainer>\n                </Grid>\n            </Grid>\n            <PaginationButtons />\n        </InfoCard>\n    )\n}\n"],"names":["IbutsuComponent","entity","results","setResults","React","resultsPage","setResultsPage","page","setPage","infoData","setInfoData","showHealthDataError","setShowHealthDataError","showRunsDataError","setShowRunsDataError","loading","setLoading","config","useApi","configApiRef","useEntity","console","log","metadata","annotations","useStylesButton","makeStyles","theme","createStyles","root","margin","spacing","useStylesCircularProgress","display","alignItems","justifyContent","marginLeft","classesButton","classesCircularProgress","maxPages","length","pageIncrement","pageDecrement","appName","name","substring","indexOf","apiBaseUrl","getString","RowHead","TableHead","TableRow","TableCell","align","Typography","variant","summaryItems","key","title","color","SummaryPills","result","Stack","direction","map","item","summary","Tooltip","Pill","style","backgroundColor","RowBody","isoDateFormat","created","Link","href","id","duration","toFixed","env","ShowTable","Table","aria-label","TableBody","PaginationButtons","div","className","Button","onClick","disabled","useEffect","async","healthUrl","fetch","method","headers","then","response","ok","Error","statusText","json","data","frontend","catch","error","getHealthData","runsOpts","runsQueryString","URLSearchParams","toString","runsUrl","appRuns","runs","filter","d","component","finally","getRunsData","pageOffset","slice","InfoCard","CircularProgress","noPadding","Grid","container","TableContainer","Paper"],"sourceRoot":""}